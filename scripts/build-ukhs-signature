#!/usr/bin/env python

import argparse
import functools
import os
import sys

from boink.args       import (add_output_interval_args,
                              add_pairing_args,
                              print_interval_settings)
from boink.minimizers import UKHSCountSignature
from boink.parsing    import grouper
from boink.processors import UKHSCountSignatureProcessor
from boink.reporting  import UKHSSignatureReporter

perr = functools.partial(print, file=sys.stderr)

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-W', type=int, default=31)
    parser.add_argument('-K', type=int, default=9)
    parser.add_argument('--streaming-output',
                        nargs='?')
    parser.add_argument('-o', type=argparse.FileType('w'), default=sys.stdout)
    parser.add_argument('inputs', nargs='+')
    add_output_interval_args(parser)
    add_pairing_args(parser)

    args = parser.parse_args()
    print_interval_settings(args)

    if args.pairing_mode == 'split':
        _samples = grouper(2, args.inputs)
    else:
        _samples = args.inputs

    for sample in _samples:
        perr('Build signature for {0} with W={1}, W={2}...'.format(sample, args.W, args.K))

        gen = UKHSCountSignature(args.W, args.K)
        proc = UKHSCountSignatureProcessor(gen,
                                           args.fine_interval,
                                           args.medium_interval,
                                           args.coarse_interval)
        if args.streaming_output:
            reporter = UKHSSignatureReporter(args.streaming_output,
                                             gen)
            proc.Notifier.register_listener(reporter)

        if args.pairing_mode == 'split':
            proc.process(*sample)
            gen.save(args.o, os.path.basename(sample[0]))
        else:
            proc.process(sample)
            gen.save(args.o, os.path.basename(sample))

        perr('Done.')

if __name__ == '__main__':
    main()

#!/usr/bin/env python

import argparse
import functools
import os
import sys

from boink.args       import (add_output_interval_args,
                              add_pairing_args,
                              print_interval_settings)
from boink.minimizers import UKHSCountSignature
from boink.parsing    import grouper
from boink.processors import UKHSCountSignatureProcessor
from boink.reporting  import UKHSSignatureReporter
from boink.utils      import find_common_basename, remove_fx_suffix

perr = functools.partial(print, file=sys.stderr)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-W', type=int, default=31)
    parser.add_argument('-K', type=int, default=9)
    parser.add_argument('--streaming-output',
                        nargs='?')
    parser.add_argument('--name', nargs='*')
    parser.add_argument('-o', type=argparse.FileType('w'), default=sys.stdout)
    parser.add_argument('inputs', nargs='+')
    add_output_interval_args(parser)
    add_pairing_args(parser)

    args = parser.parse_args()
    print_interval_settings(args)

    if args.pairing_mode == 'split':
        _samples = list(grouper(2, args.inputs))
        _names   = [find_common_basename(remove_fx_suffix(l), remove_fx_suffix(r)) for l, r in _samples]
    else:
        _samples = args.inputs
        _names   = [os.path.basename(remove_fx_suffix(s)) for s in _samples]

    if args.name:
        if len(args.name) != len(_samples):
            raise RuntimeError('Number of names must match number of samples.')
        _names = args.name

    for sample, name in zip(_samples, _names):
        perr('Build signature for {0} with W={1}, W={2}...'.format(sample, args.W, args.K))

        gen = UKHSCountSignature(args.W, args.K)
        proc = UKHSCountSignatureProcessor(gen,
                                           args.fine_interval,
                                           args.medium_interval,
                                           args.coarse_interval)
        if args.streaming_output:
            reporter = UKHSSignatureReporter(args.streaming_output,
                                             gen)
            proc.Notifier.register_listener(reporter)

        if args.pairing_mode == 'split':
            proc.process(*sample)
        else:
            proc.process(sample)
        
        gen.save(args.o, name)
        perr('Done.')

if __name__ == '__main__':
    main()

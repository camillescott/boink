#!/usr/bin/env python

import argparse
import sys

from boink.args import (build_dBG_args, add_pairing_args,
                        add_save_cDBG_args)
from boink.dbg import make_dBG
from boink.cdbg import StreamingCompactor
from boink.parsing import grouper
from boink.processors import StreamingCompactorProcessor
from boink.reporters import StreamingCompactorReporter



def parse_args():
    parser = build_dBG_args()
    add_pairing_args(parser)
    add_save_cDBG_args(parser)
    parser.add_argument('-o', dest='output_filename', default='/dev/stdout')
    parser.add_argument('-i', dest='inputs', nargs='+', default=['/dev/stdin'])

    args = parser.parse_args()
    return args


def main():
    args = parse_args()

    graph = make_dBG(args.ksize,
                     args.max_tablesize,
                     args.n_tables)
    compactor = StreamingCompactor(graph)
    processor = StreamingCompactorProcessor(compactor,
                                            args.save_stats_interval)
    reporter = StreamingCompactorReporter(args.save_cdbg_stats)
    processor.Notifier.register_listener(reporter)


    if args.pairing_mode == 'split':
        _samples = grouper(2, args.inputs)
    else:
        _samples = args.inputs

    for sample in _samples:
        if args.pairing_mode == 'split':
            processor.process(*sample)
        else:
            processor.process(sample)

    for fmt in args.save_cdbg_format:
        compactor.cdbg.save(args.save_cdbg_prefix + '.' + fmt, fmt)

    if args.save_dbg:
        graph.save(args.savegraph)


if __name__ == '__main__':
    main()

#!/usr/bin/env python

import argparse
import sys

from boink.args import (build_dBG_args,
                        add_pairing_args,
                        add_output_interval_args,
                        add_save_cDBG_args,
                        print_cdbg_args,
                        print_dBG_args,
                        print_interval_settings,
                        print_boink_intro)
from boink.dbg import make_dBG
from boink.compactor import make_streaming_compactor
from boink.parsing import grouper
from boink.processors import make_streaming_compactor_processor
from boink.reporters import (make_streaming_compactor_reporter,
                             make_cdbgwriter_reporter,
                             cDBGHistoryReporter)



def parse_args():
    parser = build_dBG_args()
    add_pairing_args(parser)
    add_save_cDBG_args(parser)
    add_output_interval_args(parser)
    parser.add_argument('-o', dest='output_filename', default='/dev/stdout')
    parser.add_argument('-i', dest='inputs', nargs='+', default=['/dev/stdin'])

    args = parser.parse_args()
    return args


def main():
    args = parse_args()

    print_boink_intro()
    print_dBG_args(args)
    print_cdbg_args(args)
    print_interval_settings(args)

    graph = make_dBG(args.ksize,
                     args.max_tablesize,
                     args.n_tables,
                     storage='_' + args.storage_type)
    compactor = make_streaming_compactor(graph)
    processor = make_streaming_compactor_processor(compactor,
                                                   args.fine_interval,
                                                   args.medium_interval,
                                                   args.coarse_interval)
    if args.track_cdbg_stats:
        reporter = make_streaming_compactor_reporter(args.track_cdbg_stats,
                                                     compactor)
        processor.Notifier.register_listener(reporter)

    writers = []
    if args.save_cdbg:
        for cdbg_format in args.save_cdbg_format:
            writer = make_cdbgwriter_reporter(args.save_cdbg + '.' + cdbg_format,
                                              cdbg_format,
                                              compactor.cdbg)
            processor.Notifier.register_listener(writer)
            writers.append(writer)

    if args.track_cdbg_history:
        history = cDBGHistoryReporter(args.track_cdbg_history)
        compactor.cdbg.Notifier.register_listener(history)


    if args.pairing_mode == 'split':
        _samples = grouper(2, args.inputs)
    else:
        _samples = args.inputs

    for sample in _samples:
        if args.pairing_mode == 'split':
            processor.process(*sample)
        else:
            processor.process(sample)

    if args.save_dbg:
        graph.save(args.savegraph)

    if args.validate:
        if not args.validate.endswith('.csv'):
            args.validate += '.csv'
        compactor.cdbg.validate(args.validate)


if __name__ == '__main__':
    main()

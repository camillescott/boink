#!/usr/bin/env python

import argparse
import os
import sys

from boink.args import (build_dBG_args,
                        add_pairing_args,
                        add_output_interval_args,
                        add_save_cDBG_args,
                        add_prometheus_args,
                        print_cdbg_args,
                        print_dBG_args,
                        print_interval_settings,
                        print_boink_intro,
                        print_prometheus_args)
from boink.dbg import dBG
from boink.compactor import StreamingCompactor
from boink.parsing import grouper
from boink.processors import (StreamingCompactorProcessor,
                              NormalizingCompactor)
from boink.prometheus import Instrumentation
from boink.reporting import (StreamingCompactorReporter,
                             cDBGWriter,
                             cDBGUnitigReporter,
                             cDBGHistoryReporter,
                             cDBGComponentReporter)


def parse_args():
    parser = build_dBG_args()
    add_pairing_args(parser)
    add_save_cDBG_args(parser)
    add_output_interval_args(parser)
    add_prometheus_args(parser)
    args = parser.parse_args()
    print_boink_intro()
    print_dBG_args(args)
    print_cdbg_args(args)
    print_interval_settings(args)
    print_prometheus_args(args)

    return args


def main():

    processor = NormalizingCompactor.build(compactor,
                                           args.normalize,
                                           args.fine_interval,
                                           args.medium_interval,
                                           args.coarse_interval)



    if args.track_cdbg_history:
        history = cDBGHistoryReporter(args.track_cdbg_history)
        compactor.cdbg.Notifier.register_listener(history)



    if args.pairing_mode == 'split':
        _samples = grouper(2, args.inputs)
    else:
        _samples = args.inputs

    for sample in _samples:
        if args.pairing_mode == 'split':
            processor.process(*sample)
        else:
            processor.process(sample)

    if args.save_dbg:
        graph.save(args.savegraph)

    if args.validate:
        if not args.validate.endswith('.csv'):
            args.validate += '.csv'
        compactor.cdbg.validate(args.validate)


if __name__ == '__main__':
    main()

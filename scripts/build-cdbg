#!/usr/bin/env python

import argparse
import os
import sys

from boink.args import (build_dBG_args,
                        add_pairing_args,
                        add_output_interval_args,
                        add_save_cDBG_args,
                        add_prometheus_args,
                        print_cdbg_args,
                        print_dBG_args,
                        print_interval_settings,
                        print_boink_intro,
                        print_prometheus_args)
from boink.dbg import dBG
from boink.compactor import StreamingCompactor
from boink.parsing import grouper
from boink.processors import (make_streaming_compactor_processor,
                              make_normalizing_compactor)
from boink.prometheus import Instrumentation
from boink.reporting import (StreamingCompactorReporter,
                             cDBGWriter,
                             cDBGUnitigReporter,
                             cDBGHistoryReporter,
                             cDBGComponentReporter)


def parse_args():
    parser = build_dBG_args()
    add_pairing_args(parser)
    add_save_cDBG_args(parser)
    add_output_interval_args(parser)
    add_prometheus_args(parser)
    parser.add_argument('-o', dest='output_filename', default='/dev/stdout')
    parser.add_argument('-i', dest='inputs', nargs='+', default=['/dev/stdin'])

    args = parser.parse_args()
    def join(p):
        return p if p is None else os.path.join(args.results_dir, p)
    args.track_cdbg_stats =      join(args.track_cdbg_stats)
    args.track_cdbg_components = join(args.track_cdbg_components)
    args.track_cdbg_history =    join(args.track_cdbg_history)
    args.save_cdbg =             join(args.save_cdbg)
    args.track_cdbg_unitig_bp =  join(args.track_cdbg_unitig_bp)

    print_boink_intro()
    print_dBG_args(args)
    print_cdbg_args(args)
    print_interval_settings(args)
    print_prometheus_args(args)

    return args


def main():
    args = parse_args()
    os.makedirs(args.results_dir, exist_ok=True)

    instrumentation = Instrumentation(args.port,
                                      expose=(args.port != None))

    graph = dBG.build(args.ksize,
                      args.max_tablesize,
                      args.n_tables,
                      storage='_' + args.storage_type)
    compactor = StreamingCompactor.build(graph,
                                         instrumentation=instrumentation)
    if args.normalize is None:
        processor = make_streaming_compactor_processor(compactor,
                                                       args.fine_interval,
                                                       args.medium_interval,
                                                       args.coarse_interval)
    else:
        processor = make_normalizing_compactor(compactor,
                                               args.normalize,
                                               args.fine_interval,
                                               args.medium_interval,
                                               args.coarse_interval)

    if args.track_cdbg_stats:
        reporter = StreamingCompactorReporter.build(args.track_cdbg_stats,
                                                    compactor)
        processor.Notifier.register_listener(reporter)

    if args.track_cdbg_unitig_bp:
        if args.unitig_bp_bins is None:
            bins = [args.ksize, 100, 200, 500, 1000]
        else:
            bins = args.unitig_bp_bins
        unitig_reporter = cDBGUnitigReporter.build(args.track_cdbg_unitig_bp,
                                                   compactor.cdbg,
                                                   bins)
        processor.Notifier.register_listener(unitig_reporter)

    writers = []
    if args.save_cdbg:
        for cdbg_format in args.save_cdbg_format:
            writer = cDBGWriter.build(args.save_cdbg + '.' + cdbg_format,
                                      cdbg_format,
                                      compactor.cdbg)
            processor.Notifier.register_listener(writer)
            writers.append(writer)

    if args.track_cdbg_history:
        history = cDBGHistoryReporter(args.track_cdbg_history)
        compactor.cdbg.Notifier.register_listener(history)

    if args.track_cdbg_components:
        components = cDBGComponentReporter.build(args.track_cdbg_components,
                                                 compactor.cdbg,
                                                 args.component_sample_size,
                                                 instrumention)
        processor.Notifier.register_listener(components)

    if args.pairing_mode == 'split':
        _samples = grouper(2, args.inputs)
    else:
        _samples = args.inputs

    for sample in _samples:
        if args.pairing_mode == 'split':
            processor.process(*sample)
        else:
            processor.process(sample)

    if args.save_dbg:
        graph.save(args.savegraph)

    if args.validate:
        if not args.validate.endswith('.csv'):
            args.validate += '.csv'
        compactor.cdbg.validate(args.validate)


if __name__ == '__main__':
    main()

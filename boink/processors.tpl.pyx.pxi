# boink/processors.tpl.pyx.pxi
# Copyright (C) 2018 Camille Scott
# All rights reserved.
#
# This software may be modified and distributed under the terms
# of the MIT license.  See the LICENSE file for details.
#
# WARNING: this file is automatically generated; do not modify it!
# The source template is: processors.tpl.pyx

from cython.operator cimport dereference as deref

from libc.stdint cimport uint64_t
from libcpp.memory cimport make_shared
from libcpp.string cimport string

from boink.dbg cimport *
from boink.utils cimport *
from boink.processors cimport *


cdef class FileProcessor_Base(FileProcessor):
    pass



cdef class FileConsumer__BitStorage__DefaultShifter(FileProcessor_Base):

    def __cinit__(self, dBG__BitStorage__DefaultShifter graph,
                        uint64_t fine_interval,
                        uint64_t medium_interval,
                        uint64_t coarse_interval):

        self._this = make_shared[_FileConsumer[_dBG[_BitStorage,_DefaultShifter]]](graph._this,
                                                                              fine_interval,
                                                                              medium_interval,
                                                                              coarse_interval)
        self.storage_type = graph.storage_type
        self.shifter_type = graph.shifter_type

    def process(self, str input_filename):
        deref(self._this).process(_bstring(input_filename))

        return (deref(self._this).n_reads(),
                deref(self._this).n_consumed())


cdef class DecisionNodeProcessor__BitStorage__DefaultShifter(FileProcessor_Base):
    
    def __cinit__(self, StreamingCompactor__BitStorage__DefaultShifter compactor,
                        str output_filename,
                        uint64_t fine_interval,
                        uint64_t medium_interval,
                        uint64_t coarse_interval):

        self.output_filename = output_filename
        cdef string _output_filename = _bstring(output_filename)
        self._this = make_shared[_DecisionNodeProcessor[_dBG[_BitStorage,_DefaultShifter]]](compactor._this,
                                                                                       _output_filename,
                                                                                       fine_interval,
                                                                                       medium_interval,
                                                                                       coarse_interval)
        self.storage_type = compactor.storage_type
        self.shifter_type = compactor.shifter_type

    def process(self, str input_filename):
        deref(self._this).process(_bstring(input_filename))

        return deref(self._this).n_reads()


cdef class StreamingCompactorProcessor__BitStorage__DefaultShifter(FileProcessor_Base):
    
    def __cinit__(self, StreamingCompactor__BitStorage__DefaultShifter compactor,
                        uint64_t fine_interval,
                        uint64_t medium_interval,
                        uint64_t coarse_interval):

        self._this = make_shared[_StreamingCompactorProcessor[_dBG[_BitStorage,_DefaultShifter]]](compactor._this,
                                                                                             fine_interval,
                                                                                             medium_interval,
                                                                                             coarse_interval)
        self.Notifier = EventNotifier._wrap(<shared_ptr[_EventNotifier]>self._this)

        self.storage_type = compactor.storage_type
        self.shifter_type = compactor.shifter_type

    def process(self, str input_filename, str right_filename=None):
        if right_filename is None:
            deref(self._this).process(_bstring(input_filename))
        else:
            deref(self._this).process(_bstring(input_filename),
                                      _bstring(right_filename))

        return deref(self._this).n_reads()

cdef class FileConsumer__ByteStorage__DefaultShifter(FileProcessor_Base):

    def __cinit__(self, dBG__ByteStorage__DefaultShifter graph,
                        uint64_t fine_interval,
                        uint64_t medium_interval,
                        uint64_t coarse_interval):

        self._this = make_shared[_FileConsumer[_dBG[_ByteStorage,_DefaultShifter]]](graph._this,
                                                                              fine_interval,
                                                                              medium_interval,
                                                                              coarse_interval)
        self.storage_type = graph.storage_type
        self.shifter_type = graph.shifter_type

    def process(self, str input_filename):
        deref(self._this).process(_bstring(input_filename))

        return (deref(self._this).n_reads(),
                deref(self._this).n_consumed())


cdef class DecisionNodeProcessor__ByteStorage__DefaultShifter(FileProcessor_Base):
    
    def __cinit__(self, StreamingCompactor__ByteStorage__DefaultShifter compactor,
                        str output_filename,
                        uint64_t fine_interval,
                        uint64_t medium_interval,
                        uint64_t coarse_interval):

        self.output_filename = output_filename
        cdef string _output_filename = _bstring(output_filename)
        self._this = make_shared[_DecisionNodeProcessor[_dBG[_ByteStorage,_DefaultShifter]]](compactor._this,
                                                                                       _output_filename,
                                                                                       fine_interval,
                                                                                       medium_interval,
                                                                                       coarse_interval)
        self.storage_type = compactor.storage_type
        self.shifter_type = compactor.shifter_type

    def process(self, str input_filename):
        deref(self._this).process(_bstring(input_filename))

        return deref(self._this).n_reads()


cdef class StreamingCompactorProcessor__ByteStorage__DefaultShifter(FileProcessor_Base):
    
    def __cinit__(self, StreamingCompactor__ByteStorage__DefaultShifter compactor,
                        uint64_t fine_interval,
                        uint64_t medium_interval,
                        uint64_t coarse_interval):

        self._this = make_shared[_StreamingCompactorProcessor[_dBG[_ByteStorage,_DefaultShifter]]](compactor._this,
                                                                                             fine_interval,
                                                                                             medium_interval,
                                                                                             coarse_interval)
        self.Notifier = EventNotifier._wrap(<shared_ptr[_EventNotifier]>self._this)

        self.storage_type = compactor.storage_type
        self.shifter_type = compactor.shifter_type

    def process(self, str input_filename, str right_filename=None):
        if right_filename is None:
            deref(self._this).process(_bstring(input_filename))
        else:
            deref(self._this).process(_bstring(input_filename),
                                      _bstring(right_filename))

        return deref(self._this).n_reads()

cdef class FileConsumer__NibbleStorage__DefaultShifter(FileProcessor_Base):

    def __cinit__(self, dBG__NibbleStorage__DefaultShifter graph,
                        uint64_t fine_interval,
                        uint64_t medium_interval,
                        uint64_t coarse_interval):

        self._this = make_shared[_FileConsumer[_dBG[_NibbleStorage,_DefaultShifter]]](graph._this,
                                                                              fine_interval,
                                                                              medium_interval,
                                                                              coarse_interval)
        self.storage_type = graph.storage_type
        self.shifter_type = graph.shifter_type

    def process(self, str input_filename):
        deref(self._this).process(_bstring(input_filename))

        return (deref(self._this).n_reads(),
                deref(self._this).n_consumed())


cdef class DecisionNodeProcessor__NibbleStorage__DefaultShifter(FileProcessor_Base):
    
    def __cinit__(self, StreamingCompactor__NibbleStorage__DefaultShifter compactor,
                        str output_filename,
                        uint64_t fine_interval,
                        uint64_t medium_interval,
                        uint64_t coarse_interval):

        self.output_filename = output_filename
        cdef string _output_filename = _bstring(output_filename)
        self._this = make_shared[_DecisionNodeProcessor[_dBG[_NibbleStorage,_DefaultShifter]]](compactor._this,
                                                                                       _output_filename,
                                                                                       fine_interval,
                                                                                       medium_interval,
                                                                                       coarse_interval)
        self.storage_type = compactor.storage_type
        self.shifter_type = compactor.shifter_type

    def process(self, str input_filename):
        deref(self._this).process(_bstring(input_filename))

        return deref(self._this).n_reads()


cdef class StreamingCompactorProcessor__NibbleStorage__DefaultShifter(FileProcessor_Base):
    
    def __cinit__(self, StreamingCompactor__NibbleStorage__DefaultShifter compactor,
                        uint64_t fine_interval,
                        uint64_t medium_interval,
                        uint64_t coarse_interval):

        self._this = make_shared[_StreamingCompactorProcessor[_dBG[_NibbleStorage,_DefaultShifter]]](compactor._this,
                                                                                             fine_interval,
                                                                                             medium_interval,
                                                                                             coarse_interval)
        self.Notifier = EventNotifier._wrap(<shared_ptr[_EventNotifier]>self._this)

        self.storage_type = compactor.storage_type
        self.shifter_type = compactor.shifter_type

    def process(self, str input_filename, str right_filename=None):
        if right_filename is None:
            deref(self._this).process(_bstring(input_filename))
        else:
            deref(self._this).process(_bstring(input_filename),
                                      _bstring(right_filename))

        return deref(self._this).n_reads()

cdef class FileConsumer__SparseppSetStorage__DefaultShifter(FileProcessor_Base):

    def __cinit__(self, dBG__SparseppSetStorage__DefaultShifter graph,
                        uint64_t fine_interval,
                        uint64_t medium_interval,
                        uint64_t coarse_interval):

        self._this = make_shared[_FileConsumer[_dBG[_SparseppSetStorage,_DefaultShifter]]](graph._this,
                                                                              fine_interval,
                                                                              medium_interval,
                                                                              coarse_interval)
        self.storage_type = graph.storage_type
        self.shifter_type = graph.shifter_type

    def process(self, str input_filename):
        deref(self._this).process(_bstring(input_filename))

        return (deref(self._this).n_reads(),
                deref(self._this).n_consumed())


cdef class DecisionNodeProcessor__SparseppSetStorage__DefaultShifter(FileProcessor_Base):
    
    def __cinit__(self, StreamingCompactor__SparseppSetStorage__DefaultShifter compactor,
                        str output_filename,
                        uint64_t fine_interval,
                        uint64_t medium_interval,
                        uint64_t coarse_interval):

        self.output_filename = output_filename
        cdef string _output_filename = _bstring(output_filename)
        self._this = make_shared[_DecisionNodeProcessor[_dBG[_SparseppSetStorage,_DefaultShifter]]](compactor._this,
                                                                                       _output_filename,
                                                                                       fine_interval,
                                                                                       medium_interval,
                                                                                       coarse_interval)
        self.storage_type = compactor.storage_type
        self.shifter_type = compactor.shifter_type

    def process(self, str input_filename):
        deref(self._this).process(_bstring(input_filename))

        return deref(self._this).n_reads()


cdef class StreamingCompactorProcessor__SparseppSetStorage__DefaultShifter(FileProcessor_Base):
    
    def __cinit__(self, StreamingCompactor__SparseppSetStorage__DefaultShifter compactor,
                        uint64_t fine_interval,
                        uint64_t medium_interval,
                        uint64_t coarse_interval):

        self._this = make_shared[_StreamingCompactorProcessor[_dBG[_SparseppSetStorage,_DefaultShifter]]](compactor._this,
                                                                                             fine_interval,
                                                                                             medium_interval,
                                                                                             coarse_interval)
        self.Notifier = EventNotifier._wrap(<shared_ptr[_EventNotifier]>self._this)

        self.storage_type = compactor.storage_type
        self.shifter_type = compactor.shifter_type

    def process(self, str input_filename, str right_filename=None):
        if right_filename is None:
            deref(self._this).process(_bstring(input_filename))
        else:
            deref(self._this).process(_bstring(input_filename),
                                      _bstring(right_filename))

        return deref(self._this).n_reads()

cdef object _make_file_consumer(dBG_Base graph,
                                uint64_t fine_interval,
                                uint64_t medium_interval,
                                uint64_t coarse_interval):
    if graph.storage_type == "_BitStorage" and \
       graph.shifter_type == "_DefaultShifter":
        return FileConsumer__BitStorage__DefaultShifter(graph, 
                                                   fine_interval,
                                                   medium_interval,
                                                   coarse_interval)
    if graph.storage_type == "_ByteStorage" and \
       graph.shifter_type == "_DefaultShifter":
        return FileConsumer__ByteStorage__DefaultShifter(graph, 
                                                   fine_interval,
                                                   medium_interval,
                                                   coarse_interval)
    if graph.storage_type == "_NibbleStorage" and \
       graph.shifter_type == "_DefaultShifter":
        return FileConsumer__NibbleStorage__DefaultShifter(graph, 
                                                   fine_interval,
                                                   medium_interval,
                                                   coarse_interval)
    if graph.storage_type == "_SparseppSetStorage" and \
       graph.shifter_type == "_DefaultShifter":
        return FileConsumer__SparseppSetStorage__DefaultShifter(graph, 
                                                   fine_interval,
                                                   medium_interval,
                                                   coarse_interval)

    raise TypeError("Invalid dBG type.")

cdef object _make_decision_node_processor(StreamingCompactor_Base compactor,
                                          str filename, 
                                          uint64_t fine_interval,
                                          uint64_t medium_interval,
                                          uint64_t coarse_interval):
    if compactor.storage_type == "_BitStorage" and \
       compactor.shifter_type == "_DefaultShifter":
        return DecisionNodeProcessor__BitStorage__DefaultShifter(compactor,
                                                            filename,  
                                                            fine_interval,
                                                            medium_interval,
                                                            coarse_interval)
    if compactor.storage_type == "_ByteStorage" and \
       compactor.shifter_type == "_DefaultShifter":
        return DecisionNodeProcessor__ByteStorage__DefaultShifter(compactor,
                                                            filename,  
                                                            fine_interval,
                                                            medium_interval,
                                                            coarse_interval)
    if compactor.storage_type == "_NibbleStorage" and \
       compactor.shifter_type == "_DefaultShifter":
        return DecisionNodeProcessor__NibbleStorage__DefaultShifter(compactor,
                                                            filename,  
                                                            fine_interval,
                                                            medium_interval,
                                                            coarse_interval)
    if compactor.storage_type == "_SparseppSetStorage" and \
       compactor.shifter_type == "_DefaultShifter":
        return DecisionNodeProcessor__SparseppSetStorage__DefaultShifter(compactor,
                                                            filename,  
                                                            fine_interval,
                                                            medium_interval,
                                                            coarse_interval)

    raise TypeError("Invalid dBG type.")

cdef object _make_streaming_compactor_processor(StreamingCompactor_Base compactor, 
                                                uint64_t fine_interval,
                                                uint64_t medium_interval,
                                                uint64_t coarse_interval):
    if compactor.storage_type == "_BitStorage" and \
       compactor.shifter_type == "_DefaultShifter":
        return StreamingCompactorProcessor__BitStorage__DefaultShifter(compactor,
                                                                  fine_interval,
                                                                  medium_interval,
                                                                  coarse_interval)
    if compactor.storage_type == "_ByteStorage" and \
       compactor.shifter_type == "_DefaultShifter":
        return StreamingCompactorProcessor__ByteStorage__DefaultShifter(compactor,
                                                                  fine_interval,
                                                                  medium_interval,
                                                                  coarse_interval)
    if compactor.storage_type == "_NibbleStorage" and \
       compactor.shifter_type == "_DefaultShifter":
        return StreamingCompactorProcessor__NibbleStorage__DefaultShifter(compactor,
                                                                  fine_interval,
                                                                  medium_interval,
                                                                  coarse_interval)
    if compactor.storage_type == "_SparseppSetStorage" and \
       compactor.shifter_type == "_DefaultShifter":
        return StreamingCompactorProcessor__SparseppSetStorage__DefaultShifter(compactor,
                                                                  fine_interval,
                                                                  medium_interval,
                                                                  coarse_interval)

    raise TypeError("Invalid dBG type.")


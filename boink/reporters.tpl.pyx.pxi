# boink/reporters.tpl.pyx.pxi
# Copyright (C) 2018 Camille Scott
# All rights reserved.
#
# This software may be modified and distributed under the terms
# of the MIT license.  See the LICENSE file for details.
#
# WARNING: this file is automatically generated; do not modify it!
# The source template is: reporters.tpl.pyx

from boink.dbg cimport *
from boink.compactor cimport *
from boink.utils cimport *

import sys

from cython.operator cimport dereference as deref
from libcpp.memory cimport unique_ptr, make_unique

from boink.utils cimport _bstring
from boink.events cimport _EventListener


cdef class StreamingCompactorReporter_Base(SingleFileReporter):
    pass


cdef class StreamingCompactorReporter__BitStorage__DefaultShifter(StreamingCompactorReporter_Base):
    
    def __cinit__(self, str output_filename, StreamingCompactor__BitStorage__DefaultShifter compactor,
                        *args, **kwargs):
        if type(self) is StreamingCompactorReporter__BitStorage__DefaultShifter:
            self._s_owner = make_unique[_StreamingCompactorReporter[_dBG[_BitStorage,_DefaultShifter]]](\
                    compactor._this.get(), _bstring(output_filename))
            self._s_this = self._s_owner.get()
            self._this = self._s_this
            self._listener = <_EventListener*>self._s_owner.get()

        self.storage_type = compactor.storage_type
        self.shifter_type = compactor.shifter_type


cdef class StreamingCompactorReporter__ByteStorage__DefaultShifter(StreamingCompactorReporter_Base):
    
    def __cinit__(self, str output_filename, StreamingCompactor__ByteStorage__DefaultShifter compactor,
                        *args, **kwargs):
        if type(self) is StreamingCompactorReporter__ByteStorage__DefaultShifter:
            self._s_owner = make_unique[_StreamingCompactorReporter[_dBG[_ByteStorage,_DefaultShifter]]](\
                    compactor._this.get(), _bstring(output_filename))
            self._s_this = self._s_owner.get()
            self._this = self._s_this
            self._listener = <_EventListener*>self._s_owner.get()

        self.storage_type = compactor.storage_type
        self.shifter_type = compactor.shifter_type


cdef class StreamingCompactorReporter__NibbleStorage__DefaultShifter(StreamingCompactorReporter_Base):
    
    def __cinit__(self, str output_filename, StreamingCompactor__NibbleStorage__DefaultShifter compactor,
                        *args, **kwargs):
        if type(self) is StreamingCompactorReporter__NibbleStorage__DefaultShifter:
            self._s_owner = make_unique[_StreamingCompactorReporter[_dBG[_NibbleStorage,_DefaultShifter]]](\
                    compactor._this.get(), _bstring(output_filename))
            self._s_this = self._s_owner.get()
            self._this = self._s_this
            self._listener = <_EventListener*>self._s_owner.get()

        self.storage_type = compactor.storage_type
        self.shifter_type = compactor.shifter_type


cdef class StreamingCompactorReporter__SparseppSetStorage__DefaultShifter(StreamingCompactorReporter_Base):
    
    def __cinit__(self, str output_filename, StreamingCompactor__SparseppSetStorage__DefaultShifter compactor,
                        *args, **kwargs):
        if type(self) is StreamingCompactorReporter__SparseppSetStorage__DefaultShifter:
            self._s_owner = make_unique[_StreamingCompactorReporter[_dBG[_SparseppSetStorage,_DefaultShifter]]](\
                    compactor._this.get(), _bstring(output_filename))
            self._s_this = self._s_owner.get()
            self._this = self._s_this
            self._listener = <_EventListener*>self._s_owner.get()

        self.storage_type = compactor.storage_type
        self.shifter_type = compactor.shifter_type


cdef object _make_streaming_compactor_reporter(str output_filename,
                                               StreamingCompactor_Base compactor):
    if compactor.storage_type == "_BitStorage" and \
       compactor.shifter_type == "_DefaultShifter":
        return StreamingCompactorReporter__BitStorage__DefaultShifter(output_filename, compactor)
    if compactor.storage_type == "_ByteStorage" and \
       compactor.shifter_type == "_DefaultShifter":
        return StreamingCompactorReporter__ByteStorage__DefaultShifter(output_filename, compactor)
    if compactor.storage_type == "_NibbleStorage" and \
       compactor.shifter_type == "_DefaultShifter":
        return StreamingCompactorReporter__NibbleStorage__DefaultShifter(output_filename, compactor)
    if compactor.storage_type == "_SparseppSetStorage" and \
       compactor.shifter_type == "_DefaultShifter":
        return StreamingCompactorReporter__SparseppSetStorage__DefaultShifter(output_filename, compactor)

    raise TypeError("Invalid dBG type.")


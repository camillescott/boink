# boink/reporting.tpl.pyx.pxi
# Copyright (C) 2018 Camille Scott
# All rights reserved.
#
# This software may be modified and distributed under the terms
# of the MIT license.  See the LICENSE file for details.
#
# WARNING: this file is automatically generated; do not modify it!
# The source template is: reporting.tpl.pyx

from boink.dbg cimport *
from boink.compactor cimport *
from boink.utils cimport *

import sys

from cython.operator cimport dereference as deref
from libcpp.memory cimport shared_ptr, make_shared

from boink.utils cimport _bstring
from boink.events cimport _EventListener


cdef class StreamingCompactorReporter_Base(SingleFileReporter):
    pass


cdef class StreamingCompactorReporter__BitStorage__DefaultShifter(StreamingCompactorReporter_Base):
    
    def __cinit__(self, str output_filename, StreamingCompactor__BitStorage__DefaultShifter compactor,
                        *args, **kwargs):
        if type(self) is StreamingCompactorReporter__BitStorage__DefaultShifter:
            self._s_this = make_shared[_StreamingCompactorReporter[_dBG[_BitStorage,_DefaultShifter]]](\
                    compactor._this, _bstring(output_filename))
            self._this = <shared_ptr[_SingleFileReporter]>self._s_this
            self._listener = <shared_ptr[_EventListener]>self._s_this

        self.storage_type = compactor.storage_type
        self.shifter_type = compactor.shifter_type

cdef class cDBGWriter__BitStorage__DefaultShifter(cDBGWriter_Base):

    def __cinit__(self, str output_prefix, str graph_format, cDBG__BitStorage__DefaultShifter cdbg,
                        *args, **kwargs):
        
        self.storage_type = cdbg.storage_type
        self.shifter_type = cdbg.shifter_type

        if type(self) is cDBGWriter__BitStorage__DefaultShifter:
            self._s_this = make_shared[_cDBGWriter[_dBG[_BitStorage,_DefaultShifter]]](cdbg._this,
                                                     convert_format(graph_format),
                                                     _bstring(output_prefix))
            self._this = <shared_ptr[_MultiFileReporter]>self._s_this
            self._listener = <shared_ptr[_EventListener]>self._s_this


cdef class StreamingCompactorReporter__ByteStorage__DefaultShifter(StreamingCompactorReporter_Base):
    
    def __cinit__(self, str output_filename, StreamingCompactor__ByteStorage__DefaultShifter compactor,
                        *args, **kwargs):
        if type(self) is StreamingCompactorReporter__ByteStorage__DefaultShifter:
            self._s_this = make_shared[_StreamingCompactorReporter[_dBG[_ByteStorage,_DefaultShifter]]](\
                    compactor._this, _bstring(output_filename))
            self._this = <shared_ptr[_SingleFileReporter]>self._s_this
            self._listener = <shared_ptr[_EventListener]>self._s_this

        self.storage_type = compactor.storage_type
        self.shifter_type = compactor.shifter_type

cdef class cDBGWriter__ByteStorage__DefaultShifter(cDBGWriter_Base):

    def __cinit__(self, str output_prefix, str graph_format, cDBG__ByteStorage__DefaultShifter cdbg,
                        *args, **kwargs):
        
        self.storage_type = cdbg.storage_type
        self.shifter_type = cdbg.shifter_type

        if type(self) is cDBGWriter__ByteStorage__DefaultShifter:
            self._s_this = make_shared[_cDBGWriter[_dBG[_ByteStorage,_DefaultShifter]]](cdbg._this,
                                                     convert_format(graph_format),
                                                     _bstring(output_prefix))
            self._this = <shared_ptr[_MultiFileReporter]>self._s_this
            self._listener = <shared_ptr[_EventListener]>self._s_this


cdef class StreamingCompactorReporter__NibbleStorage__DefaultShifter(StreamingCompactorReporter_Base):
    
    def __cinit__(self, str output_filename, StreamingCompactor__NibbleStorage__DefaultShifter compactor,
                        *args, **kwargs):
        if type(self) is StreamingCompactorReporter__NibbleStorage__DefaultShifter:
            self._s_this = make_shared[_StreamingCompactorReporter[_dBG[_NibbleStorage,_DefaultShifter]]](\
                    compactor._this, _bstring(output_filename))
            self._this = <shared_ptr[_SingleFileReporter]>self._s_this
            self._listener = <shared_ptr[_EventListener]>self._s_this

        self.storage_type = compactor.storage_type
        self.shifter_type = compactor.shifter_type

cdef class cDBGWriter__NibbleStorage__DefaultShifter(cDBGWriter_Base):

    def __cinit__(self, str output_prefix, str graph_format, cDBG__NibbleStorage__DefaultShifter cdbg,
                        *args, **kwargs):
        
        self.storage_type = cdbg.storage_type
        self.shifter_type = cdbg.shifter_type

        if type(self) is cDBGWriter__NibbleStorage__DefaultShifter:
            self._s_this = make_shared[_cDBGWriter[_dBG[_NibbleStorage,_DefaultShifter]]](cdbg._this,
                                                     convert_format(graph_format),
                                                     _bstring(output_prefix))
            self._this = <shared_ptr[_MultiFileReporter]>self._s_this
            self._listener = <shared_ptr[_EventListener]>self._s_this


cdef class StreamingCompactorReporter__SparseppSetStorage__DefaultShifter(StreamingCompactorReporter_Base):
    
    def __cinit__(self, str output_filename, StreamingCompactor__SparseppSetStorage__DefaultShifter compactor,
                        *args, **kwargs):
        if type(self) is StreamingCompactorReporter__SparseppSetStorage__DefaultShifter:
            self._s_this = make_shared[_StreamingCompactorReporter[_dBG[_SparseppSetStorage,_DefaultShifter]]](\
                    compactor._this, _bstring(output_filename))
            self._this = <shared_ptr[_SingleFileReporter]>self._s_this
            self._listener = <shared_ptr[_EventListener]>self._s_this

        self.storage_type = compactor.storage_type
        self.shifter_type = compactor.shifter_type

cdef class cDBGWriter__SparseppSetStorage__DefaultShifter(cDBGWriter_Base):

    def __cinit__(self, str output_prefix, str graph_format, cDBG__SparseppSetStorage__DefaultShifter cdbg,
                        *args, **kwargs):
        
        self.storage_type = cdbg.storage_type
        self.shifter_type = cdbg.shifter_type

        if type(self) is cDBGWriter__SparseppSetStorage__DefaultShifter:
            self._s_this = make_shared[_cDBGWriter[_dBG[_SparseppSetStorage,_DefaultShifter]]](cdbg._this,
                                                     convert_format(graph_format),
                                                     _bstring(output_prefix))
            self._this = <shared_ptr[_MultiFileReporter]>self._s_this
            self._listener = <shared_ptr[_EventListener]>self._s_this


cdef object _make_streaming_compactor_reporter(str output_filename,
                                               StreamingCompactor_Base compactor):
    if compactor.storage_type == "_BitStorage" and \
       compactor.shifter_type == "_DefaultShifter":
        return StreamingCompactorReporter__BitStorage__DefaultShifter(output_filename, compactor)
    if compactor.storage_type == "_ByteStorage" and \
       compactor.shifter_type == "_DefaultShifter":
        return StreamingCompactorReporter__ByteStorage__DefaultShifter(output_filename, compactor)
    if compactor.storage_type == "_NibbleStorage" and \
       compactor.shifter_type == "_DefaultShifter":
        return StreamingCompactorReporter__NibbleStorage__DefaultShifter(output_filename, compactor)
    if compactor.storage_type == "_SparseppSetStorage" and \
       compactor.shifter_type == "_DefaultShifter":
        return StreamingCompactorReporter__SparseppSetStorage__DefaultShifter(output_filename, compactor)

    raise TypeError("Invalid dBG type.")

cdef object _make_cdbgwriter_reporter(str output_prefix,
                                      str graph_format,
                                      cDBG_Base cdbg):
    if cdbg.storage_type == "_BitStorage" and \
       cdbg.shifter_type == "_DefaultShifter":
        return cDBGWriter__BitStorage__DefaultShifter(output_prefix, graph_format, cdbg)
    if cdbg.storage_type == "_ByteStorage" and \
       cdbg.shifter_type == "_DefaultShifter":
        return cDBGWriter__ByteStorage__DefaultShifter(output_prefix, graph_format, cdbg)
    if cdbg.storage_type == "_NibbleStorage" and \
       cdbg.shifter_type == "_DefaultShifter":
        return cDBGWriter__NibbleStorage__DefaultShifter(output_prefix, graph_format, cdbg)
    if cdbg.storage_type == "_SparseppSetStorage" and \
       cdbg.shifter_type == "_DefaultShifter":
        return cDBGWriter__SparseppSetStorage__DefaultShifter(output_prefix, graph_format, cdbg)

    raise TypeError("Invalid dBG type.")

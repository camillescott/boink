
# boink/assembly.pyx.pxi
#
# Copyright (C) 2018 Camille Scott
# All rights reserved.
#
# This software may be modified and distributed under the terms
# of the MIT license.  See the LICENSE file for details.
#
# WARNING: this file is automatically generated; do not modify it!
# The source template is: assembly.tpl.pyx
from cython.operator cimport dereference as deref

from libc.stdint cimport uint64_t
from libcpp.string cimport string

from boink import dbg
from boink.utils cimport *


cdef class Assembler_Base:
    pass

cdef class Assembler_BitStorage_DefaultShifter(Assembler_Base):

    def __cinit__(self, dBG_BitStorage_DefaultShifter graph):
        if type(self) is Assembler_BitStorage_DefaultShifter:
            self._this = make_shared[_AssemblerMixin[_dBG[BitStorage,DefaultShifter]]](graph._this)
            self._graph = graph._this
            self.Graph = graph
        self.storage_type = graph.storage_type
        self.shifter_type = graph.shifter_type

    @property
    def cursor(self):
        return deref(self._this).get_cursor()

    @cursor.setter
    def cursor(self, str seed):
        deref(self._this).set_cursor(_bstring(seed))

    def clear_seen(self):
        deref(self._this).clear_seen()

    def degree_left(self):
        return deref(self._this).degree_left()

    def degree_right(self):
        return deref(self._this).degree_right()

    def degree(self):
        return deref(self._this).degree()

    def assemble(self, str seed):
        cdef bytes _seed = _bstring(seed)
        cdef Path path

        deref(self._this).assemble(_seed, path)
        return deref(self._this).to_string(path)

    def assemble_left(self, object seed=None):
        cdef Path path
        if seed is None:
            deref(self._this).assemble_left(path)
        else:
            deref(self._this).assemble_left(_bstring(seed), path)

        return deref(self._this).to_string(path)
        
    def assemble_right(self, object seed=None):
        cdef Path path
        if seed is None:
            deref(self._this).assemble_right(path)
        else:
            deref(self._this).assemble_right(_bstring(seed), path)

        return deref(self._this).to_string(path)

cdef class Assembler_NibbleStorage_DefaultShifter(Assembler_Base):

    def __cinit__(self, dBG_NibbleStorage_DefaultShifter graph):
        if type(self) is Assembler_NibbleStorage_DefaultShifter:
            self._this = make_shared[_AssemblerMixin[_dBG[NibbleStorage,DefaultShifter]]](graph._this)
            self._graph = graph._this
            self.Graph = graph
        self.storage_type = graph.storage_type
        self.shifter_type = graph.shifter_type

    @property
    def cursor(self):
        return deref(self._this).get_cursor()

    @cursor.setter
    def cursor(self, str seed):
        deref(self._this).set_cursor(_bstring(seed))

    def clear_seen(self):
        deref(self._this).clear_seen()

    def degree_left(self):
        return deref(self._this).degree_left()

    def degree_right(self):
        return deref(self._this).degree_right()

    def degree(self):
        return deref(self._this).degree()

    def assemble(self, str seed):
        cdef bytes _seed = _bstring(seed)
        cdef Path path

        deref(self._this).assemble(_seed, path)
        return deref(self._this).to_string(path)

    def assemble_left(self, object seed=None):
        cdef Path path
        if seed is None:
            deref(self._this).assemble_left(path)
        else:
            deref(self._this).assemble_left(_bstring(seed), path)

        return deref(self._this).to_string(path)
        
    def assemble_right(self, object seed=None):
        cdef Path path
        if seed is None:
            deref(self._this).assemble_right(path)
        else:
            deref(self._this).assemble_right(_bstring(seed), path)

        return deref(self._this).to_string(path)

cdef class Assembler_ByteStorage_DefaultShifter(Assembler_Base):

    def __cinit__(self, dBG_ByteStorage_DefaultShifter graph):
        if type(self) is Assembler_ByteStorage_DefaultShifter:
            self._this = make_shared[_AssemblerMixin[_dBG[ByteStorage,DefaultShifter]]](graph._this)
            self._graph = graph._this
            self.Graph = graph
        self.storage_type = graph.storage_type
        self.shifter_type = graph.shifter_type

    @property
    def cursor(self):
        return deref(self._this).get_cursor()

    @cursor.setter
    def cursor(self, str seed):
        deref(self._this).set_cursor(_bstring(seed))

    def clear_seen(self):
        deref(self._this).clear_seen()

    def degree_left(self):
        return deref(self._this).degree_left()

    def degree_right(self):
        return deref(self._this).degree_right()

    def degree(self):
        return deref(self._this).degree()

    def assemble(self, str seed):
        cdef bytes _seed = _bstring(seed)
        cdef Path path

        deref(self._this).assemble(_seed, path)
        return deref(self._this).to_string(path)

    def assemble_left(self, object seed=None):
        cdef Path path
        if seed is None:
            deref(self._this).assemble_left(path)
        else:
            deref(self._this).assemble_left(_bstring(seed), path)

        return deref(self._this).to_string(path)
        
    def assemble_right(self, object seed=None):
        cdef Path path
        if seed is None:
            deref(self._this).assemble_right(path)
        else:
            deref(self._this).assemble_right(_bstring(seed), path)

        return deref(self._this).to_string(path)



cdef object _make_assembler(dBG_Base graph):
    if graph.storage_type == "BitStorage" and \
       graph.shifter_type == "DefaultShifter":
        return Assembler_BitStorage_DefaultShifter(graph)

    if graph.storage_type == "NibbleStorage" and \
       graph.shifter_type == "DefaultShifter":
        return Assembler_NibbleStorage_DefaultShifter(graph)

    if graph.storage_type == "ByteStorage" and \
       graph.shifter_type == "DefaultShifter":
        return Assembler_ByteStorage_DefaultShifter(graph)


    raise TypeError("Invalid dBG type.")


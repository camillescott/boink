# boink/assembly.tpl.pyx.pxi
# Copyright (C) 2018 Camille Scott
# All rights reserved.
#
# This software may be modified and distributed under the terms
# of the MIT license.  See the LICENSE file for details.
#
# WARNING: this file is automatically generated; do not modify it!
# The source template is: assembly.tpl.pyx

from cython.operator cimport dereference as deref

from libc.stdint cimport uint64_t
from libcpp.memory cimport make_unique
from libcpp.string cimport string

from boink.dbg cimport *
from boink.utils cimport *


cdef class Assembler_Base:
    pass

cdef class Assembler__BitStorage__DefaultShifter(Assembler_Base):

    def __cinit__(self, dBG__BitStorage__DefaultShifter graph):
        if type(self) is Assembler__BitStorage__DefaultShifter:
            self._this = make_unique[_AssemblerMixin[_dBG[_BitStorage,_DefaultShifter]]](graph._this.get())
            self._graph = graph._this.get()
            self.Graph = graph
        self.storage_type = graph.storage_type
        self.shifter_type = graph.shifter_type

    @property
    def cursor(self):
        return deref(self._this).get_cursor()

    @cursor.setter
    def cursor(self, str seed):
        deref(self._this).set_cursor(_bstring(seed))

    def clear_seen(self):
        deref(self._this).clear_seen()

    def degree_left(self):
        return deref(self._this).degree_left()

    def degree_right(self):
        return deref(self._this).degree_right()

    def degree(self):
        return deref(self._this).degree()

    def assemble(self, str seed):
        cdef bytes _seed = _bstring(seed)
        cdef Path path

        deref(self._this).assemble(_seed, path)
        return deref(self._this).to_string(path)

    def assemble_left(self, object seed=None):
        cdef Path path
        if seed is None:
            deref(self._this).assemble_left(path)
        else:
            deref(self._this).assemble_left(_bstring(seed), path)

        return deref(self._this).to_string(path)
        
    def assemble_right(self, object seed=None):
        cdef Path path
        if seed is None:
            deref(self._this).assemble_right(path)
        else:
            deref(self._this).assemble_right(_bstring(seed), path)

        return deref(self._this).to_string(path)
cdef class Assembler__ByteStorage__DefaultShifter(Assembler_Base):

    def __cinit__(self, dBG__ByteStorage__DefaultShifter graph):
        if type(self) is Assembler__ByteStorage__DefaultShifter:
            self._this = make_unique[_AssemblerMixin[_dBG[_ByteStorage,_DefaultShifter]]](graph._this.get())
            self._graph = graph._this.get()
            self.Graph = graph
        self.storage_type = graph.storage_type
        self.shifter_type = graph.shifter_type

    @property
    def cursor(self):
        return deref(self._this).get_cursor()

    @cursor.setter
    def cursor(self, str seed):
        deref(self._this).set_cursor(_bstring(seed))

    def clear_seen(self):
        deref(self._this).clear_seen()

    def degree_left(self):
        return deref(self._this).degree_left()

    def degree_right(self):
        return deref(self._this).degree_right()

    def degree(self):
        return deref(self._this).degree()

    def assemble(self, str seed):
        cdef bytes _seed = _bstring(seed)
        cdef Path path

        deref(self._this).assemble(_seed, path)
        return deref(self._this).to_string(path)

    def assemble_left(self, object seed=None):
        cdef Path path
        if seed is None:
            deref(self._this).assemble_left(path)
        else:
            deref(self._this).assemble_left(_bstring(seed), path)

        return deref(self._this).to_string(path)
        
    def assemble_right(self, object seed=None):
        cdef Path path
        if seed is None:
            deref(self._this).assemble_right(path)
        else:
            deref(self._this).assemble_right(_bstring(seed), path)

        return deref(self._this).to_string(path)
cdef class Assembler__NibbleStorage__DefaultShifter(Assembler_Base):

    def __cinit__(self, dBG__NibbleStorage__DefaultShifter graph):
        if type(self) is Assembler__NibbleStorage__DefaultShifter:
            self._this = make_unique[_AssemblerMixin[_dBG[_NibbleStorage,_DefaultShifter]]](graph._this.get())
            self._graph = graph._this.get()
            self.Graph = graph
        self.storage_type = graph.storage_type
        self.shifter_type = graph.shifter_type

    @property
    def cursor(self):
        return deref(self._this).get_cursor()

    @cursor.setter
    def cursor(self, str seed):
        deref(self._this).set_cursor(_bstring(seed))

    def clear_seen(self):
        deref(self._this).clear_seen()

    def degree_left(self):
        return deref(self._this).degree_left()

    def degree_right(self):
        return deref(self._this).degree_right()

    def degree(self):
        return deref(self._this).degree()

    def assemble(self, str seed):
        cdef bytes _seed = _bstring(seed)
        cdef Path path

        deref(self._this).assemble(_seed, path)
        return deref(self._this).to_string(path)

    def assemble_left(self, object seed=None):
        cdef Path path
        if seed is None:
            deref(self._this).assemble_left(path)
        else:
            deref(self._this).assemble_left(_bstring(seed), path)

        return deref(self._this).to_string(path)
        
    def assemble_right(self, object seed=None):
        cdef Path path
        if seed is None:
            deref(self._this).assemble_right(path)
        else:
            deref(self._this).assemble_right(_bstring(seed), path)

        return deref(self._this).to_string(path)
cdef class Assembler__SparseppSetStorage__DefaultShifter(Assembler_Base):

    def __cinit__(self, dBG__SparseppSetStorage__DefaultShifter graph):
        if type(self) is Assembler__SparseppSetStorage__DefaultShifter:
            self._this = make_unique[_AssemblerMixin[_dBG[_SparseppSetStorage,_DefaultShifter]]](graph._this.get())
            self._graph = graph._this.get()
            self.Graph = graph
        self.storage_type = graph.storage_type
        self.shifter_type = graph.shifter_type

    @property
    def cursor(self):
        return deref(self._this).get_cursor()

    @cursor.setter
    def cursor(self, str seed):
        deref(self._this).set_cursor(_bstring(seed))

    def clear_seen(self):
        deref(self._this).clear_seen()

    def degree_left(self):
        return deref(self._this).degree_left()

    def degree_right(self):
        return deref(self._this).degree_right()

    def degree(self):
        return deref(self._this).degree()

    def assemble(self, str seed):
        cdef bytes _seed = _bstring(seed)
        cdef Path path

        deref(self._this).assemble(_seed, path)
        return deref(self._this).to_string(path)

    def assemble_left(self, object seed=None):
        cdef Path path
        if seed is None:
            deref(self._this).assemble_left(path)
        else:
            deref(self._this).assemble_left(_bstring(seed), path)

        return deref(self._this).to_string(path)
        
    def assemble_right(self, object seed=None):
        cdef Path path
        if seed is None:
            deref(self._this).assemble_right(path)
        else:
            deref(self._this).assemble_right(_bstring(seed), path)

        return deref(self._this).to_string(path)


cdef object _make_assembler(dBG_Base graph):
    if graph.storage_type == "_BitStorage" and \
       graph.shifter_type == "_DefaultShifter":
        return Assembler__BitStorage__DefaultShifter(graph)
    if graph.storage_type == "_ByteStorage" and \
       graph.shifter_type == "_DefaultShifter":
        return Assembler__ByteStorage__DefaultShifter(graph)
    if graph.storage_type == "_NibbleStorage" and \
       graph.shifter_type == "_DefaultShifter":
        return Assembler__NibbleStorage__DefaultShifter(graph)
    if graph.storage_type == "_SparseppSetStorage" and \
       graph.shifter_type == "_DefaultShifter":
        return Assembler__SparseppSetStorage__DefaultShifter(graph)

    raise TypeError("Invalid dBG type.")

